#pragma once

#include <cstdint>

#cmakedefine01 UNI20_ENABLE_STACKTRACE

#if UNI20_ENABLE_STACKTRACE

  #if __has_include(<stacktrace>)
    // Check for stacktrace support (C++23 and GCC 13+ or Clang+libc++)
    #include <stacktrace>
    #if defined(__cpp_lib_stacktrace) && (__cpp_lib_stacktrace >= 202011L)
      #define UNI20_HAS_STACKTRACE 1
    #else
      #define UNI20_HAS_STACKTRACE 0
    #endif
  #else
    #define UNI20_HAS_STACKTRACE 0
  #endif

#else
  #define UNI20_HAS_STACKTRACE 0
#endif

// Automatically generated trace module enable flags:
@TRACE_MODULE_DEFINITIONS@

// Debugging options
#cmakedefine01 UNI20_DEBUG_DAG

// Backend configurations
#cmakedefine01 UNI20_BACKEND_BLAS
#cmakedefine01 UNI20_BACKEND_MKL
#cmakedefine01 UNI20_BACKEND_CUDA
#cmakedefine01 UNI20_BACKEND_CUSOLVER

#cmakedefine01 UNI20_ILP64

#define BLAS_VENDOR @UNI20_DETECTED_BLAS_VENDOR@

#define @UNI20_DETECTED_BLAS_VENDOR_MACRO@ 1

namespace uni20 {

#if @BLA_SIZEOF_INTEGER@ == 8
using blas_int = std::int64_t;
#else
using blas_int = std::int32_t;
#endif

} // namespace uni20
